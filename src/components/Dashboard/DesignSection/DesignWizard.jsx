import React, { useState, useEffect } from 'react';
import styled, { keyframes, css } from 'styled-components';
import { useTranslation } from 'react-i18next';
import { 
  FaArrowRight, 
  FaArrowLeft, 
  FaMagic, 
  FaPalette, 
  FaFont, 
  FaImage, 
  FaCheck, 
  FaTimes,
  FaEdit,
  FaLightbulb
} from 'react-icons/fa';
import { colors, spacing, shadows, borderRadius, transitions, typography, breakpoints } from '../../../styles/GlobalTheme';
import Modal from '../../Common/Modal';
import DesignSummaryCard from './DesignSummaryCard';

/**
 * Design Wizard Component
 * 
 * An interactive step-by-step wizard for gathering design preferences
 * and generating AI-powered design recommendations.
 */
const DesignWizard = ({ isOpen, onClose }) => {
  const { t, i18n } = useTranslation();
  const isRTL = i18n.language === 'ar';
  
  // Wizard state
  const [currentStep, setCurrentStep] = useState(1);
  const [totalSteps, setTotalSteps] = useState(5);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showSummary, setShowSummary] = useState(false);
  
  // Form data
  const [formData, setFormData] = useState({
    stylePreference: '',
    colorScheme: '',
    typography: '',
    layoutStyle: '',
    additionalNotes: ''
  });
  
  // Design summary (would be generated by Gemini API in a real implementation)
  const [designSummary, setDesignSummary] = useState(null);
  
  // Style options
  const styleOptions = [
    { id: 'modern', label: t('design.modern', 'Modern'), icon: <FaLightbulb />, description: t('design.modernDesc', 'Clean lines, minimalist approach, contemporary feel') },
    { id: 'corporate', label: t('design.corporate', 'Corporate'), icon: <FaCheck />, description: t('design.corporateDesc', 'Professional, structured, business-oriented') },
    { id: 'playful', label: t('design.playful', 'Playful'), icon: <FaMagic />, description: t('design.playfulDesc', 'Fun, colorful, animated elements') },
    { id: 'minimal', label: t('design.minimal', 'Minimal'), icon: <FaTimes />, description: t('design.minimalDesc', 'Simplistic, spacious, focus on content') }
  ];
  
  // Color scheme options with palettes
  const colorOptions = [
    { 
      id: 'purple', 
      label: t('design.purpleTheme', 'Purple Theme'), 
      color: '#7b2cbf',
      palette: ['#7b2cbf', '#9d4edd', '#c77dff', '#e0aaff', '#240046']
    },
    { 
      id: 'blue', 
      label: t('design.blueTheme', 'Blue Theme'), 
      color: '#4361ee',
      palette: ['#4361ee', '#4895ef', '#4cc9f0', '#3f37c9', '#0b1354']
    },
    { 
      id: 'green', 
      label: t('design.greenTheme', 'Green Theme'), 
      color: '#2a9d8f',
      palette: ['#2a9d8f', '#57cc99', '#80ed99', '#38b2ac', '#1e6e5c']
    },
    { 
      id: 'orange', 
      label: t('design.orangeTheme', 'Orange Theme'), 
      color: '#e76f51',
      palette: ['#e76f51', '#f4a261', '#ee8959', '#e9c46a', '#ca6702']
    },
    { 
      id: 'teal', 
      label: t('design.tealTheme', 'Teal Theme'), 
      color: '#008080',
      palette: ['#008080', '#20b2aa', '#5f9ea0', '#48d1cc', '#004040']
    },
    { 
      id: 'pink', 
      label: t('design.pinkTheme', 'Pink Theme'), 
      color: '#ff0080',
      palette: ['#ff0080', '#ff69b4', '#ffb6c1', '#ffc0cb', '#8b0046']
    },
    { 
      id: 'dark', 
      label: t('design.darkTheme', 'Dark Theme'), 
      color: '#121212',
      palette: ['#121212', '#1e1e1e', '#2d2d2d', '#3d3d3d', '#000000']
    },
    { 
      id: 'gradient', 
      label: t('design.gradientTheme', 'Gradient Theme'), 
      color: '#8a2387',
      palette: ['#8a2387', '#e94057', '#f27121', '#c471ed', '#12c2e9']
    }
  ];
  
  // Typography options
  const typographyOptions = [
    { id: 'modern', label: t('design.modernTypography', 'Modern Sans-Serif'), description: t('design.modernTypographyDesc', 'Clean, readable sans-serif fonts') },
    { id: 'classic', label: t('design.classicTypography', 'Classic Serif'), description: t('design.classicTypographyDesc', 'Traditional, elegant serif fonts') },
    { id: 'playful', label: t('design.playfulTypography', 'Playful Mix'), description: t('design.playfulTypographyDesc', 'Fun, expressive font combinations') },
    { id: 'minimal', label: t('design.minimalTypography', 'Minimal'), description: t('design.minimalTypographyDesc', 'Simple, highly readable typography') }
  ];
  
  // Layout options
  const layoutOptions = [
    { id: 'grid', label: t('design.gridLayout', 'Grid Layout'), description: t('design.gridLayoutDesc', 'Organized grid system with clear sections') },
    { id: 'asymmetric', label: t('design.asymmetricLayout', 'Asymmetric'), description: t('design.asymmetricLayoutDesc', 'Creative, non-uniform layout') },
    { id: 'minimal', label: t('design.minimalLayout', 'Minimal'), description: t('design.minimalLayoutDesc', 'Lots of whitespace, focused content') },
    { id: 'dynamic', label: t('design.dynamicLayout', 'Dynamic'), description: t('design.dynamicLayoutDesc', 'Interactive, animated layout elements') }
  ];
  
  // Handle option selection
  const handleOptionSelect = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  
  // Handle text input change
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  // Go to next step
  const handleNextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(prev => prev + 1);
    } else {
      handleGenerateDesign();
    }
  };
  
  // Go to previous step
  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };
  
  // Generate design summary
  const handleGenerateDesign = () => {
    setIsGenerating(true);
    
    // Simulate API call to Gemini
    setTimeout(() => {
      // This would be the response from Gemini API in a real implementation
      const generatedSummary = {
        styleDescription: `A ${formData.stylePreference} design with ${formData.colorScheme} color scheme`,
        colorPalette: {
          primary: getColorValue(formData.colorScheme),
          secondary: getLighterColor(getColorValue(formData.colorScheme)),
          accent: getDarkerColor(getColorValue(formData.colorScheme)),
          background: '#fafafa',
          text: '#333333'
        },
        typography: {
          headingFont: formData.typography === 'classic' ? 'Georgia, serif' : 'Poppins, sans-serif',
          bodyFont: 'Inter, sans-serif',
          scale: '1.2'
        },
        layout: formData.layoutStyle,
        recommendations: [
          'Use ample whitespace between sections',
          'Implement subtle animations for interactive elements',
          'Ensure high contrast for text elements',
          'Consider accessibility in color choices'
        ]
      };
      
      setDesignSummary(generatedSummary);
      setIsGenerating(false);
      setShowSummary(true);
    }, 2000);
  };
  
  // Helper function to get color value
  const getColorValue = (colorId) => {
    const option = colorOptions.find(opt => opt.id === colorId);
    return option ? option.color : '#7b2cbf';
  };
  
  // Helper function to get lighter color
  const getLighterColor = (hexColor) => {
    // Simple implementation - in a real app would use a color library
    return hexColor + '80'; // Add 50% opacity
  };
  
  // Helper function to get darker color
  const getDarkerColor = (hexColor) => {
    // Simple implementation - in a real app would use a color library
    return hexColor;
  };
  
  // Reset wizard
  const handleReset = () => {
    setCurrentStep(1);
    setFormData({
      stylePreference: '',
      colorScheme: '',
      typography: '',
      layoutStyle: '',
      additionalNotes: ''
    });
    setShowSummary(false);
    setDesignSummary(null);
  };
  
  // Edit design preferences
  const handleEditPreferences = () => {
    setShowSummary(false);
    setCurrentStep(1);
  };
  
  // Handle close
  const handleClose = () => {
    handleReset();
    onClose();
  };
  
  // Render step content
  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <StepContent>
            <StepTitle>{t('design.chooseStylePreference', 'Choose Your Style Preference')}</StepTitle>
            <ScrollContainer>
              <OptionGrid>
                {styleOptions.map(option => (
                  <OptionCard
                    key={option.id}
                    selected={formData.stylePreference === option.id}
                    onClick={() => handleOptionSelect('stylePreference', option.id)}
                  >
                    <OptionIcon>{option.icon}</OptionIcon>
                    <OptionLabel>{option.label}</OptionLabel>
                    <OptionDescription>{option.description}</OptionDescription>
                  </OptionCard>
                ))}
              </OptionGrid>
            </ScrollContainer>
          </StepContent>
        );
      
      case 2:
        return (
          <StepContent>
            <StepTitle>{t('design.chooseColorScheme', 'Select Color Scheme')}</StepTitle>
            <ScrollContainer>
              <OptionGrid>
                {colorOptions.map(option => (
                  <ColorOptionCard
                    key={option.id}
                    selected={formData.colorScheme === option.id}
                    onClick={() => handleOptionSelect('colorScheme', option.id)}
                    color={option.color}
                  >
                    <ColorPaletteDisplay>
                      {option.palette.map((color, index) => (
                        <ColorPaletteItem 
                          key={index} 
                          color={color} 
                          isMain={index === 0}
                        />
                      ))}
                    </ColorPaletteDisplay>
                    <OptionLabel>{option.label}</OptionLabel>
                  </ColorOptionCard>
                ))}
              </OptionGrid>
            </ScrollContainer>
          </StepContent>
        );
      
      case 3:
        return (
          <StepContent>
            <StepTitle>{t('design.chooseTypography', 'Select Typography Style')}</StepTitle>
            <ScrollContainer>
              <OptionGrid>
                {typographyOptions.map(option => (
                  <OptionCard
                    key={option.id}
                    selected={formData.typography === option.id}
                    onClick={() => handleOptionSelect('typography', option.id)}
                  >
                    <TypographySample typographyStyle={option.id}>{option.label}</TypographySample>
                    <OptionDescription>{option.description}</OptionDescription>
                  </OptionCard>
                ))}
              </OptionGrid>
            </ScrollContainer>
          </StepContent>
        );
      
      case 4:
        return (
          <StepContent>
            <StepTitle>{t('design.chooseLayout', 'Select Layout Style')}</StepTitle>
            <ScrollContainer>
              <OptionGrid>
                {layoutOptions.map(option => (
                  <OptionCard
                    key={option.id}
                    selected={formData.layoutStyle === option.id}
                    onClick={() => handleOptionSelect('layoutStyle', option.id)}
                  >
                    <LayoutIcon layoutStyle={option.id} />
                    <OptionLabel>{option.label}</OptionLabel>
                    <OptionDescription>{option.description}</OptionDescription>
                  </OptionCard>
                ))}
              </OptionGrid>
            </ScrollContainer>
          </StepContent>
        );
      
      case 5:
        return (
          <StepContent>
            <StepTitle>{t('design.additionalNotes', 'Additional Notes (Optional)')}</StepTitle>
            <TextAreaWrapper>
              <StyledTextArea
                name="additionalNotes"
                value={formData.additionalNotes}
                onChange={handleInputChange}
                placeholder={t('design.additionalNotesPlaceholder', 'Any specific requirements or preferences...')}
                rows={6}
              />
            </TextAreaWrapper>
          </StepContent>
        );
      
      default:
        return null;
    }
  };
  
  // Check if current step is complete
  const isStepComplete = () => {
    switch (currentStep) {
      case 1:
        return !!formData.stylePreference;
      case 2:
        return !!formData.colorScheme;
      case 3:
        return !!formData.typography;
      case 4:
        return !!formData.layoutStyle;
      case 5:
        return true; // Notes are optional
      default:
        return false;
    }
  };
  
  // Render the wizard UI
  return (
    <Modal
      isOpen={isOpen}
      onClose={handleClose}
      title={t('design.designWizard', 'Design Wizard')}
      icon={<FaPalette />}
      size="lg"
      theme="dark"
      animation="fade"
      centered
      fullScreenOnMobile={true}
      customStyles={{
        content: {
          height: '650px',
          width: '1000px',
          maxHeight: '90vh',
          maxWidth: '95vw',
          padding: `${spacing.lg} ${spacing.xl}`,
          direction: isRTL ? 'rtl' : 'ltr',
          overflow: 'hidden'
        }
      }}
    >
      <NoScrollWrapper>
        {showSummary ? (
        <SummaryContainer>
          <DesignSummaryCard 
            summary={designSummary} 
            onEdit={handleEditPreferences}
          />
          <ButtonContainer>
            <SecondaryButton onClick={handleClose}>
              {t('common.close', 'Close')}
            </SecondaryButton>
            <PrimaryButton onClick={handleClose}>
              {t('design.applyDesign', 'Apply Design')}
            </PrimaryButton>
          </ButtonContainer>
        </SummaryContainer>
      ) : (
        <>
          <ProgressContainer>
            <ProgressBar>
              <ProgressFill step={currentStep} totalSteps={totalSteps} />
            </ProgressBar>
            <StepIndicator>
              <span>{t('design.step', 'Step')}</span>
              <span>{currentStep} {t('design.of', 'of')} {totalSteps}</span>
            </StepIndicator>
          </ProgressContainer>
          
          {renderStepContent()}
          
          <ButtonContainer>
            <SecondaryButton 
              onClick={currentStep === 1 ? handleClose : handlePrevStep}
              disabled={isGenerating}
            >
              {currentStep === 1 ? t('common.cancel', 'Cancel') : t('common.back', 'Back')}
            </SecondaryButton>
            
            <PrimaryButton 
              onClick={handleNextStep}
              disabled={!isStepComplete() || isGenerating}
            >
              {isGenerating ? (
                <LoadingSpinner />
              ) : currentStep === totalSteps ? (
                t('design.generateDesign', 'Generate Design')
              ) : (
                t('common.next', 'Next')
              )}
            </PrimaryButton>
          </ButtonContainer>
        </>
      )}
      </NoScrollWrapper>
    </Modal>
  );
};

// Animation keyframes
const fadeIn = keyframes`
  from { opacity: 0; }
  to { opacity: 1; }
`;

const pulse = keyframes`
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
`;

const spin = keyframes`
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
`;

const gradientShift = keyframes`
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
`;

const floatAnimation = keyframes`
  0% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
  100% { transform: translateY(0); }
`;

const NoScrollWrapper = styled.div`
  height: 100%;
  width: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  position: relative;
  max-height: 100%;
`;

// Styled Components
const ProgressContainer = styled.div`
  margin-bottom: ${spacing.md};
  position: relative;
  width: 100%;
`;

const ProgressBar = styled.div`
  width: 100%;
  height: 6px;
  background-color: rgba(255, 255, 255, 0.05);
  border-radius: ${borderRadius.pill};
  overflow: hidden;
  margin-bottom: ${spacing.sm};
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
  position: relative;
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, 
      rgba(255, 255, 255, 0.03) 0%, 
      rgba(255, 255, 255, 0.06) 50%, 
      rgba(255, 255, 255, 0.03) 100%);
    pointer-events: none;
  }
`;

const ProgressFill = styled.div`
  height: 100%;
  width: ${props => (props.step / props.totalSteps) * 100}%;
  background: linear-gradient(90deg, #cd3efd, #7b2cbf);
  border-radius: ${borderRadius.pill};
  transition: width ${transitions.slow};
  box-shadow: 0 0 10px rgba(205, 62, 253, 0.5);
  
  &:after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 6px;
    height: 6px;
    background: white;
    border-radius: 50%;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
    transform: translateX(${props => (props.step === props.totalSteps) ? '0' : '3px'});
    opacity: ${props => (props.step === props.totalSteps) ? '0' : '1'};
  }
`;

const StepIndicator = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: ${typography.fontSizes.sm};
  color: rgba(255, 255, 255, 0.7);
  
  span:last-child {
    font-weight: ${typography.fontWeights.semiBold};
    color: white;
  }
`;

const StepContent = styled.div`
  animation: ${fadeIn} 0.3s ease-in-out;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
`;

const StepTitle = styled.h3`
  font-size: ${typography.fontSizes.lg};
  font-weight: ${typography.fontWeights.semiBold};
  margin-bottom: ${spacing.lg};
  color: white;
  text-align: center;
`;

const ScrollContainer = styled.div`
  position: relative;
  width: 100%;
  height: calc(100% - 60px);
  overflow: hidden;
  
  &:before, &:after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 80px;
    z-index: 2;
    pointer-events: none;
  }
  
  &:before {
    left: 0;
    background: linear-gradient(to right, rgba(30, 20, 60, 1), rgba(30, 20, 60, 0.8), rgba(30, 20, 60, 0));
  }
  
  &:after {
    right: 0;
    background: linear-gradient(to left, rgba(30, 20, 60, 1), rgba(30, 20, 60, 0.8), rgba(30, 20, 60, 0));
  }
`;

const OptionGrid = styled.div`
  display: flex;
  flex-wrap: nowrap;
  gap: ${spacing.md};
  width: 100%;
  height: 100%;
  padding: ${spacing.md};
  overflow-x: auto;
  overflow-y: hidden;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
  scrollbar-width: thin;
  scrollbar-color: rgba(123, 44, 191, 0.5) rgba(30, 20, 60, 0.1);
  align-items: center;
  min-height: 0;
  
  &::-webkit-scrollbar {
    height: 6px;
  }
  
  &::-webkit-scrollbar-track {
    background: rgba(30, 20, 60, 0.1);
    border-radius: 10px;
  }
  
  &::-webkit-scrollbar-thumb {
    background: rgba(123, 44, 191, 0.5);
    border-radius: 10px;
  }
  
  @media (max-width: ${breakpoints.md}) {
    padding: ${spacing.sm};
  }
`;

const OptionCard = styled.div`
  background: rgba(255, 255, 255, 0.03);
  border-radius: ${borderRadius.lg};
  padding: ${spacing.md};
  cursor: pointer;
  transition: all ${transitions.medium};
  border: 2px solid ${props => props.selected ? colors.accent.primary : 'rgba(255, 255, 255, 0.05)'};
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  position: relative;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(5px);
  min-width: 200px;
  width: 200px;
  height: 180px;
  flex: 0 0 auto;
  margin: 0 ${spacing.sm};
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transform: translateX(-100%);
    transition: transform 0.8s ease;
  }
  
  &:hover {
    background: rgba(255, 255, 255, 0.07);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    
    &:before {
      transform: translateX(100%);
    }
  }
  
  ${props => props.selected && css`
    background: rgba(123, 44, 191, 0.15);
    box-shadow: 0 0 20px rgba(205, 62, 253, 0.4);
    border-color: ${colors.accent.primary};
    animation: ${pulse} 3s infinite ease-in-out;
    
    &:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(circle at center, rgba(205, 62, 253, 0.1) 0%, transparent 70%);
      pointer-events: none;
    }
  `}
`;

const ColorOptionCard = styled(OptionCard)`
  height: 180px;
  width: 200px;
  min-width: 200px;
  padding: ${spacing.sm};
  justify-content: space-between;
`;

// Color palette display component for showing color swatches
const ColorPaletteDisplay = styled.div`
  display: flex;
  width: 100%;
  height: 60px;
  border-radius: ${borderRadius.md};
  overflow: hidden;
  margin-bottom: ${spacing.sm};
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  position: relative;
  transition: all ${transitions.medium};
  transform-origin: center;
  border: 1px solid rgba(255, 255, 255, 0.1);
  
  ${ColorOptionCard}:hover & {
    transform: scale(1.05);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }
  
  ${ColorOptionCard}:active & {
    transform: scale(0.98);
  }
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(255,255,255,0.05) 0%, rgba(0,0,0,0.1) 100%);
    pointer-events: none;
    z-index: 1;
  }
`;

// Removed duplicate ColorPaletteItem declaration

// Individual color swatch item in the palette
const ColorPaletteItem = styled.div`
  flex: ${props => props.isMain ? 1.8 : 1};
  background-color: ${props => props.color};
  height: 100%;
  position: relative;
  transition: all ${transitions.fast};
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, rgba(255,255,255,0.1) 0%, rgba(0,0,0,0.1) 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  &:hover:before {
    opacity: 1;
  }
  
  ${props => props.isMain && css`
    position: relative;
    
    &:after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 14px;
      height: 14px;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 50%;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
      z-index: 2;
    }
  `}
  
  &:hover {
    transform: scaleY(1.08);
    z-index: 2;
    box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.2);
  }
`;

const ColorSwatch = styled.div`
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background-color: ${props => props.color};
  margin-bottom: ${spacing.md};
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
`;

const ColorCircle = styled.div`
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background-color: ${props => props.color};
  margin-bottom: ${spacing.md};
  border: 2px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
`;

const OptionIcon = styled.div`
  font-size: 2rem;
  color: ${colors.accent.primary};
  margin-bottom: ${spacing.sm};
`;

const OptionLabel = styled.div`
  font-weight: ${typography.fontWeights.semiBold};
  margin-bottom: ${spacing.xs};
  color: white;
`;

const OptionDescription = styled.div`
  font-size: ${typography.fontSizes.sm};
  color: rgba(255, 255, 255, 0.7);
`;

const TypographySample = styled.div`
  font-size: 1.5rem;
  margin-bottom: ${spacing.md};
  color: white;
  
  ${props => {
    switch(props.typographyStyle) {
      case 'modern':
        return css`font-family: 'Poppins', sans-serif;`;
      case 'classic':
        return css`font-family: 'Georgia', serif;`;
      case 'playful':
        return css`font-family: 'Comic Sans MS', cursive;`;
      case 'minimal':
        return css`font-family: 'Inter', sans-serif;`;
      default:
        return css`font-family: 'Inter', sans-serif;`;
    }
  }}
`;

const LayoutIcon = styled.div`
  width: 80px;
  height: 60px;
  margin-bottom: ${spacing.md};
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: ${borderRadius.sm};
  position: relative;
  
  &:before, &:after {
    content: '';
    position: absolute;
    background-color: rgba(255, 255, 255, 0.3);
  }
  
  ${props => {
    switch(props.layoutStyle) {
      case 'grid':
        return css`
          &:before, &:after {
            top: 10px;
            bottom: 10px;
            width: 1px;
            left: 33%;
          }
          &:after {
            left: 66%;
          }
        `;
      case 'asymmetric':
        return css`
          &:before {
            top: 10px;
            height: 20px;
            width: 60%;
            left: 10px;
          }
          &:after {
            bottom: 10px;
            height: 15px;
            width: 40%;
            right: 10px;
          }
        `;
      case 'minimal':
        return css`
          &:before {
            top: 50%;
            transform: translateY(-50%);
            height: 2px;
            width: 60%;
            left: 10px;
          }
        `;
      case 'dynamic':
        return css`
          &:before {
            top: 15px;
            height: 10px;
            width: 70%;
            left: 10px;
            transform: rotate(-5deg);
          }
          &:after {
            bottom: 15px;
            height: 10px;
            width: 50%;
            right: 10px;
            transform: rotate(5deg);
          }
        `;
      default:
        return '';
    }
  }}
`;

const TextAreaWrapper = styled.div`
  width: 100%;
`;

const StyledTextArea = styled.textarea`
  width: 100%;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: ${borderRadius.md};
  padding: ${spacing.md};
  color: white;
  font-size: ${typography.fontSizes.md};
  resize: vertical;
  transition: all ${transitions.medium};
  
  &:focus {
    outline: none;
    border-color: ${colors.accent.primary};
    box-shadow: 0 0 0 2px rgba(205, 62, 253, 0.2);
  }
  
  &::placeholder {
    color: rgba(255, 255, 255, 0.4);
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: center;
  gap: ${spacing.lg};
  position: relative;
  width: 100%;
  margin-top: ${spacing.xxl};
  padding-top: ${spacing.xl};
  
  /* Add subtle glow effect to the container */
  &::after {
    content: '';
    position: absolute;
    bottom: -15px;
    left: 50%;
    transform: translateX(-50%);
    width: 40%;
    height: 1px;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(205, 62, 253, 0.3), 
      transparent
    );
    opacity: 0.5;
    pointer-events: none;
  }
  
  /* Add subtle divider above buttons */
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 60%;
    height: 1px;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.1), 
      transparent
    );
  }
  
  @media (max-width: ${breakpoints.md}) {
    flex-direction: column-reverse;
    align-items: center;
    gap: ${spacing.md};
  }
`;
const Button = styled.button`
  padding: ${spacing.md} ${spacing.xl};
  border-radius: ${borderRadius.lg};
  font-weight: ${typography.fontWeights.semiBold};
  transition: all ${transitions.medium};
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 1.05rem;
  letter-spacing: 0.5px;
  position: relative;
  overflow: hidden;
  height: 54px;
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

const PrimaryButton = styled(Button)`
  background: linear-gradient(45deg, #cd3efd, #7b2cbf, #9d4edd);
  background-size: 200% 200%;
  color: white;
  border: none;
  min-width: 160px;
  box-shadow: 0 4px 15px rgba(123, 44, 191, 0.3);
  animation: ${props => props.disabled ? 'none' : css`${gradientShift} 5s ease infinite`};
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.3) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    transition: all 0.6s ease;
  }
  
  &:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(123, 44, 191, 0.5);
    
    &:before {
      left: 100%;
    }
  }
  
  &:active:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(123, 44, 191, 0.3);
  }
`;

const SecondaryButton = styled(Button)`
  background: rgba(255, 255, 255, 0.05);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.15);
  min-width: 160px;
  backdrop-filter: blur(5px);
  position: relative;
  overflow: hidden;
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transform: translateX(-100%);
    transition: transform 0.8s ease;
  }
  
  &:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.25);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    
    &:before {
      transform: translateX(100%);
    }
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }
`;

const SummaryContainer = styled.div`
  animation: ${fadeIn} 0.5s ease-in-out;
`;

const LoadingSpinner = styled.div`
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: ${spin} 1s linear infinite;
`;

export default DesignWizard;
